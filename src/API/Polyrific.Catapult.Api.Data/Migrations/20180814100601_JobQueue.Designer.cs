// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Polyrific.Catapult.Api.Data;

namespace Polyrific.Catapult.Api.Data.Migrations
{
    [DbContext(typeof(CatapultDbContext))]
    [Migration("20180814100601_JobQueue")]
    partial class JobQueue
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.JobCounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.ToTable("JobCounters");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.JobDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Name");

                    b.Property<int>("ProjectId");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("JobDefinitions");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.JobQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatapultEngineIPAddress");

                    b.Property<string>("CatapultEngineId");

                    b.Property<string>("CatapultEngineMachineName");

                    b.Property<string>("CatapultEngineVersion");

                    b.Property<string>("Code");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("JobDefinitionId");

                    b.Property<string>("JobTasksStatus");

                    b.Property<string>("JobType");

                    b.Property<string>("OriginUrl");

                    b.Property<int>("ProjectId");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("JobQueues");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.JobTaskDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConfigString");

                    b.Property<bool?>("ContinueWhenError");

                    b.Property<DateTime>("Created");

                    b.Property<int>("JobDefinitionId");

                    b.Property<int?>("Sequence");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("JobDefinitionId");

                    b.ToTable("JobTaskDefinitions");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.ProjectDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Name");

                    b.Property<int>("ProjectId");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectDataModels");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.ProjectDataModelProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("DataType");

                    b.Property<bool>("IsRequired");

                    b.Property<string>("Label");

                    b.Property<string>("Name");

                    b.Property<int>("ProjectDataModelId");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("ProjectDataModelId");

                    b.ToTable("ProjectDataModelProperties");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.ProjectMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<int>("ProjectId");

                    b.Property<int>("ProjectMemberRoleId");

                    b.Property<DateTime?>("Updated");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectMemberRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectMembers");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.ProjectMemberRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.ToTable("ProjectMemberRoles");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, ConcurrencyStamp = "f8025fee-dec6-4528-9514-58339adc3383", Name = "Administrator", NormalizedName = "ADMINISTRATOR" },
                        new { Id = 2, ConcurrencyStamp = "c7cbed51-e910-4c2d-ab17-b27d3001ea47", Name = "Basic", NormalizedName = "BASIC" },
                        new { Id = 3, ConcurrencyStamp = "18f44ef4-86b2-4ebb-a400-b2615c9715e0", Name = "Guest", NormalizedName = "GUEST" }
                    );
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = 1, AccessFailedCount = 0, ConcurrencyStamp = "6e60fade-1c1f-4f6a-ab7e-768358780783", Email = "admin@opencatapult.net", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "ADMIN@OPENCATAPULT.NET", NormalizedUserName = "ADMIN@OPENCATAPULT.NET", PasswordHash = "AQAAAAEAACcQAAAAEKBBPo49hQnfSTCnZPTPvpdvqOA5YKXoS8XT6S4hbX9vVTzjKzgXGmUUKWnpOvyjhA==", PhoneNumberConfirmed = false, SecurityStamp = "D4ZMGAXVOVP33V5FMDWVCZ7ZMH5R2JCK", TwoFactorEnabled = false, UserName = "admin@opencatapult.net" }
                    );
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.ApplicationUserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new { UserId = 1, RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.ApplicationUserToken", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.JobDefinition", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Core.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.JobQueue", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Core.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.JobTaskDefinition", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Core.Entities.JobDefinition", "JobDefinition")
                        .WithMany()
                        .HasForeignKey("JobDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.ProjectDataModel", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Core.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.ProjectDataModelProperty", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Core.Entities.ProjectDataModel", "ProjectDataModel")
                        .WithMany()
                        .HasForeignKey("ProjectDataModelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.ProjectMember", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Core.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Polyrific.Catapult.Api.Core.Entities.ProjectMemberRole", "ProjectMemberRole")
                        .WithMany()
                        .HasForeignKey("ProjectMemberRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Polyrific.Catapult.Api.Data.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Data.Identity.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Data.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Data.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Data.Identity.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Polyrific.Catapult.Api.Data.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Data.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}

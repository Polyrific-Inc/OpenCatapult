// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Polyrific.Catapult.Api.Data;

namespace Polyrific.Catapult.Api.Data.Migrations
{
    [DbContext(typeof(CatapultDbContext))]
    partial class CatapultDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.ExternalService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalServiceTypeId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime?>("Updated");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ExternalServiceTypeId");

                    b.ToTable("ExternalServices");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.ExternalServiceProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalLogic");

                    b.Property<string>("AllowedValues");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<int?>("ExternalServiceTypeId");

                    b.Property<bool>("IsRequired");

                    b.Property<bool>("IsSecret");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Sequence");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("ExternalServiceTypeId");

                    b.ToTable("ExternalServiceProperties");

                    b.HasData(
                        new { Id = 1, AllowedValues = "userPassword,authToken", ConcurrencyStamp = "504200ee-f48a-4efa-be48-e09d16ee8d65", Created = new DateTime(2018, 9, 19, 8, 14, 52, 52, DateTimeKind.Utc), Description = "Remote Credential Type (\"userPassword\" or \"authToken\")", ExternalServiceTypeId = 2, IsRequired = true, IsSecret = false, Name = "RemoteCredentialType", Sequence = 1 },
                        new { Id = 2, AdditionalLogic = "{\"HideCondition\": { \"PropertyName\": \"RemoteCredentialType\", \"PropertyValue\": \"authToken\" }, \"RequiredCondition\": { \"PropertyName\": \"RemoteCredentialType\", \"PropertyValue\": \"userPassword\" } }", ConcurrencyStamp = "4bd86c55-ffc1-4c49-a4e4-c1ee809f311d", Created = new DateTime(2018, 9, 19, 8, 14, 52, 52, DateTimeKind.Utc), Description = "Remote Username", ExternalServiceTypeId = 2, IsRequired = false, IsSecret = false, Name = "RemoteUsername", Sequence = 2 },
                        new { Id = 3, AdditionalLogic = "{\"HideCondition\": { \"PropertyName\": \"RemoteCredentialType\", \"PropertyValue\": \"authToken\" }, \"RequiredCondition\": { \"PropertyName\": \"RemoteCredentialType\", \"PropertyValue\": \"userPassword\" } }", ConcurrencyStamp = "c1eeaa4b-bdc2-4ef9-a52d-393fe9dca59a", Created = new DateTime(2018, 9, 19, 8, 14, 52, 52, DateTimeKind.Utc), Description = "Remote Password", ExternalServiceTypeId = 2, IsRequired = false, IsSecret = true, Name = "RemotePassword", Sequence = 3 },
                        new { Id = 4, AdditionalLogic = "{\"HideCondition\": { \"PropertyName\": \"RemoteCredentialType\", \"PropertyValue\": \"userPassword\" }, \"RequiredCondition\": { \"PropertyName\": \"RemoteCredentialType\", \"PropertyValue\": \"authToken\" } }", ConcurrencyStamp = "416fcf67-35cf-4ea3-b534-dade4a81da88", Created = new DateTime(2018, 9, 19, 8, 14, 52, 52, DateTimeKind.Utc), Description = "Repository Auth Token", ExternalServiceTypeId = 2, IsRequired = false, IsSecret = true, Name = "RepoAuthToken", Sequence = 4 },
                        new { Id = 5, ConcurrencyStamp = "416fcf67-35cf-4ea3-b534-dade4a81da89", Created = new DateTime(2018, 9, 19, 8, 14, 52, 52, DateTimeKind.Utc), Description = "Application Id", ExternalServiceTypeId = 3, IsRequired = true, IsSecret = false, Name = "ApplicationId", Sequence = 1 },
                        new { Id = 6, ConcurrencyStamp = "416fcf67-35cf-4ea3-b534-dade4a81da8a", Created = new DateTime(2018, 9, 19, 8, 14, 52, 52, DateTimeKind.Utc), Description = "Application Key", ExternalServiceTypeId = 3, IsRequired = true, IsSecret = true, Name = "ApplicationKey", Sequence = 2 },
                        new { Id = 7, ConcurrencyStamp = "416fcf67-35cf-4ea3-b534-dade4a81da8b", Created = new DateTime(2018, 9, 19, 8, 14, 52, 52, DateTimeKind.Utc), Description = "Tenant Id", ExternalServiceTypeId = 3, IsRequired = true, IsSecret = false, Name = "TenantId", Sequence = 3 }
                    );
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.ExternalServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.ToTable("ExternalServiceTypes");

                    b.HasData(
                        new { Id = 1, ConcurrencyStamp = "2425fe0d-4e3e-4549-a9a7-60056097ce98", Created = new DateTime(2018, 9, 19, 8, 14, 52, 51, DateTimeKind.Utc), Name = "Generic" },
                        new { Id = 2, ConcurrencyStamp = "2425fe0d-4e3e-4549-a9a7-60056097ce96", Created = new DateTime(2018, 9, 19, 8, 14, 52, 51, DateTimeKind.Utc), Name = "GitHub" },
                        new { Id = 3, ConcurrencyStamp = "2425fe0d-4e3e-4549-a9a7-60056097ce97", Created = new DateTime(2018, 9, 19, 8, 14, 52, 51, DateTimeKind.Utc), Name = "Azure" }
                    );
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.JobCounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int>("Count");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.ToTable("JobCounters");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.JobDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Name");

                    b.Property<int>("ProjectId");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("JobDefinitions");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.JobQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatapultEngineIPAddress");

                    b.Property<string>("CatapultEngineId");

                    b.Property<string>("CatapultEngineMachineName");

                    b.Property<string>("CatapultEngineVersion");

                    b.Property<string>("Code");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("Created");

                    b.Property<int?>("JobDefinitionId");

                    b.Property<string>("JobTasksStatus");

                    b.Property<string>("JobType");

                    b.Property<string>("OriginUrl");

                    b.Property<string>("OutputValues");

                    b.Property<int>("ProjectId");

                    b.Property<string>("Remarks");

                    b.Property<string>("Status");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("JobDefinitionId");

                    b.HasIndex("ProjectId");

                    b.ToTable("JobQueues");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.JobTaskDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalConfigString");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("ConfigString");

                    b.Property<DateTime>("Created");

                    b.Property<int>("JobDefinitionId");

                    b.Property<string>("Name");

                    b.Property<string>("Provider");

                    b.Property<int?>("Sequence");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("JobDefinitionId");

                    b.ToTable("JobTaskDefinitions");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.Plugin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Name");

                    b.Property<string>("RequiredServicesString");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.ToTable("Plugins");

                    b.HasData(
                        new { Id = 1, Author = "Polyrific", ConcurrencyStamp = "976e0533-360a-4e46-8220-7c1cfdf0e0a1", Created = new DateTime(2018, 9, 28, 7, 23, 37, 58, DateTimeKind.Utc), Name = "Polyrific.Catapult.TaskProviders.AspNetCoreMvc", Type = "GeneratorProvider", Version = "1.0.0-beta2" },
                        new { Id = 2, Author = "Polyrific", ConcurrencyStamp = "976e0533-360a-4e46-8220-7c1cfdf0e0a2", Created = new DateTime(2018, 9, 28, 7, 23, 37, 58, DateTimeKind.Utc), Name = "Polyrific.Catapult.Plugins.GitHub", RequiredServicesString = "GitHub", Type = "RepositoryProvider", Version = "1.0.0-beta2" },
                        new { Id = 3, Author = "Polyrific", ConcurrencyStamp = "976e0533-360a-4e46-8220-7c1cfdf0e0a3", Created = new DateTime(2018, 9, 28, 7, 23, 37, 58, DateTimeKind.Utc), Name = "Polyrific.Catapult.TaskProviders.DotNetCore", Type = "BuildProvider", Version = "1.0.0-beta2" },
                        new { Id = 4, Author = "Polyrific", ConcurrencyStamp = "976e0533-360a-4e46-8220-7c1cfdf0e0a4", Created = new DateTime(2018, 9, 28, 7, 23, 37, 58, DateTimeKind.Utc), Name = "Polyrific.Catapult.TaskProviders.DotNetCoreTest", Type = "TestProvider", Version = "1.0.0-beta2" },
                        new { Id = 5, Author = "Polyrific", ConcurrencyStamp = "976e0533-360a-4e46-8220-7c1cfdf0e0a5", Created = new DateTime(2018, 9, 28, 7, 23, 37, 58, DateTimeKind.Utc), Name = "Polyrific.Catapult.Plugins.EntityFrameworkCore", Type = "DatabaseProvider", Version = "1.0.0-beta2" },
                        new { Id = 6, Author = "Polyrific", ConcurrencyStamp = "976e0533-360a-4e46-8220-7c1cfdf0e0a6", Created = new DateTime(2018, 9, 28, 7, 23, 37, 58, DateTimeKind.Utc), Name = "Polyrific.Catapult.TaskProviders.AzureAppService", RequiredServicesString = "Azure", Type = "HostingProvider", Version = "1.0.0-beta2" }
                    );
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.PluginAdditionalConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AllowedValues");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Hint");

                    b.Property<bool?>("IsInputMasked");

                    b.Property<bool>("IsRequired");

                    b.Property<bool>("IsSecret");

                    b.Property<string>("Label");

                    b.Property<string>("Name");

                    b.Property<int>("PluginId");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("PluginId");

                    b.ToTable("PluginAdditionalConfigs");

                    b.HasData(
                        new { Id = 1, ConcurrencyStamp = "c48cafcc-b3e9-4375-a2c2-f30404382258", Created = new DateTime(2018, 9, 28, 7, 23, 37, 58, DateTimeKind.Utc), Hint = "Please enter the email address that you wish to be used as an administrator of the project", IsRequired = true, IsSecret = false, Label = "Admin Email", Name = "AdminEmail", PluginId = 1, Type = "string" },
                        new { Id = 2, ConcurrencyStamp = "c48cafcc-b3e9-4375-a2c2-f30404382259", Created = new DateTime(2018, 9, 28, 7, 23, 37, 58, DateTimeKind.Utc), IsRequired = false, IsSecret = false, Label = "Csproj Location", Name = "CsprojLocation", PluginId = 3, Type = "string" },
                        new { Id = 3, ConcurrencyStamp = "c48cafcc-b3e9-4375-a2c2-f3040438225a", Created = new DateTime(2018, 9, 28, 7, 23, 37, 58, DateTimeKind.Utc), IsRequired = false, IsSecret = false, Label = "Configuration", Name = "Configuration", PluginId = 3, Type = "string" },
                        new { Id = 4, ConcurrencyStamp = "c48cafcc-b3e9-4375-a2c2-f3040438225b", Created = new DateTime(2018, 9, 28, 7, 23, 37, 58, DateTimeKind.Utc), IsRequired = false, IsSecret = false, Label = "Startup Project Name", Name = "StartupProjectName", PluginId = 5, Type = "string" },
                        new { Id = 5, ConcurrencyStamp = "c48cafcc-b3e9-4375-a2c2-f3040438225c", Created = new DateTime(2018, 9, 28, 7, 23, 37, 58, DateTimeKind.Utc), IsRequired = false, IsSecret = false, Label = "Database Project Name", Name = "DatabaseProjectName", PluginId = 5, Type = "string" },
                        new { Id = 6, ConcurrencyStamp = "c48cafcc-b3e9-4375-a2c2-f30404382262", Created = new DateTime(2018, 9, 28, 7, 23, 37, 58, DateTimeKind.Utc), IsInputMasked = false, IsRequired = true, IsSecret = true, Label = "Connection String", Name = "ConnectionString", PluginId = 5, Type = "string" },
                        new { Id = 7, ConcurrencyStamp = "c48cafcc-b3e9-4375-a2c2-f3040438225e", Created = new DateTime(2018, 9, 28, 7, 23, 37, 58, DateTimeKind.Utc), IsRequired = true, IsSecret = false, Label = "Subscription Id", Name = "SubscriptionId", PluginId = 6, Type = "string" },
                        new { Id = 8, ConcurrencyStamp = "c48cafcc-b3e9-4375-a2c2-f3040438225f", Created = new DateTime(2018, 9, 28, 7, 23, 37, 58, DateTimeKind.Utc), IsRequired = true, IsSecret = false, Label = "Resource Group", Name = "ResourceGroupName", PluginId = 6, Type = "string" },
                        new { Id = 9, ConcurrencyStamp = "c48cafcc-b3e9-4375-a2c2-f30404382260", Created = new DateTime(2018, 9, 28, 7, 23, 37, 58, DateTimeKind.Utc), IsRequired = false, IsSecret = false, Label = "App Service", Name = "AppServiceName", PluginId = 6, Type = "string" },
                        new { Id = 10, ConcurrencyStamp = "c48cafcc-b3e9-4375-a2c2-f30404382266", Created = new DateTime(2018, 9, 28, 7, 23, 37, 58, DateTimeKind.Utc), Hint = "Do you want to automatically reassign app service name when it is not available?", IsRequired = false, IsSecret = false, Label = "Allow Automatic Rename?", Name = "AllowAutomaticRename", PluginId = 6, Type = "boolean" },
                        new { Id = 11, ConcurrencyStamp = "c48cafcc-b3e9-4375-a2c2-f30404382261", Created = new DateTime(2018, 9, 28, 7, 23, 37, 58, DateTimeKind.Utc), IsRequired = false, IsSecret = false, Label = "Deployment Slot", Name = "DeploymentSlot", PluginId = 6, Type = "string" },
                        new { Id = 12, ConcurrencyStamp = "c48cafcc-b3e9-4375-a2c2-f30404382263", Created = new DateTime(2018, 9, 28, 7, 23, 37, 58, DateTimeKind.Utc), Hint = "Please make sure to enter the connection string if the website needs to connect to the database", IsInputMasked = false, IsRequired = false, IsSecret = true, Label = "Connection String", Name = "ConnectionString", PluginId = 6, Type = "string" },
                        new { Id = 13, ConcurrencyStamp = "c48cafcc-b3e9-4375-a2c2-f30404382264", Created = new DateTime(2018, 9, 28, 7, 23, 37, 58, DateTimeKind.Utc), IsRequired = false, IsSecret = false, Label = "Default Region", Name = "Region", PluginId = 6, Type = "string" },
                        new { Id = 14, ConcurrencyStamp = "c48cafcc-b3e9-4375-a2c2-f30404382265", Created = new DateTime(2018, 9, 28, 7, 23, 37, 58, DateTimeKind.Utc), IsRequired = false, IsSecret = false, Label = "Default App Service Plan", Name = "AppServicePlan", PluginId = 6, Type = "string" }
                    );
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Client");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("Created");

                    b.Property<string>("DisplayName");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.ProjectDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsManaged");

                    b.Property<string>("Label");

                    b.Property<string>("Name");

                    b.Property<int>("ProjectId");

                    b.Property<string>("SelectKey");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectDataModels");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.ProjectDataModelProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("ControlType");

                    b.Property<DateTime>("Created");

                    b.Property<string>("DataType");

                    b.Property<bool?>("IsManaged");

                    b.Property<bool>("IsRequired");

                    b.Property<string>("Label");

                    b.Property<string>("Name");

                    b.Property<int>("ProjectDataModelId");

                    b.Property<int?>("RelatedProjectDataModelId");

                    b.Property<string>("RelationalType");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("ProjectDataModelId");

                    b.HasIndex("RelatedProjectDataModelId");

                    b.ToTable("ProjectDataModelProperties");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.ProjectMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("Created");

                    b.Property<int>("ProjectId");

                    b.Property<int>("ProjectMemberRoleId");

                    b.Property<DateTime?>("Updated");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectMemberRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectMembers");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.ProjectMemberRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.ToTable("ProjectMemberRoles");

                    b.HasData(
                        new { Id = 1, ConcurrencyStamp = "ebe3a797-1758-4782-a77b-a78cd08433ea", Created = new DateTime(2018, 8, 15, 13, 38, 58, 310, DateTimeKind.Utc), Name = "Owner" },
                        new { Id = 2, ConcurrencyStamp = "49db1ab1-9f16-4db0-b32d-5a916c2d39cd", Created = new DateTime(2018, 8, 15, 13, 38, 58, 310, DateTimeKind.Utc), Name = "Maintainer" },
                        new { Id = 3, ConcurrencyStamp = "82dcaf01-bc5f-4964-b665-56074560861f", Created = new DateTime(2018, 8, 15, 13, 38, 58, 310, DateTimeKind.Utc), Name = "Contributor" },
                        new { Id = 4, ConcurrencyStamp = "d25d2b9c-b2dc-4a36-99af-0622de434e83", Created = new DateTime(2018, 8, 15, 13, 38, 58, 310, DateTimeKind.Utc), Name = "Member" }
                    );
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, ConcurrencyStamp = "f8025fee-dec6-4528-9514-58339adc3383", Name = "Administrator", NormalizedName = "ADMINISTRATOR" },
                        new { Id = 2, ConcurrencyStamp = "c7cbed51-e910-4c2d-ab17-b27d3001ea47", Name = "Basic", NormalizedName = "BASIC" },
                        new { Id = 3, ConcurrencyStamp = "18f44ef4-86b2-4ebb-a400-b2615c9715e0", Name = "Guest", NormalizedName = "GUEST" },
                        new { Id = 4, ConcurrencyStamp = "0c810611-1e85-47cc-a7a1-7c57ff3e29bb", Name = "Engine", NormalizedName = "ENGINE" }
                    );
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool?>("IsCatapultEngine");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = 1, AccessFailedCount = 0, ConcurrencyStamp = "6e60fade-1c1f-4f6a-ab7e-768358780783", Email = "admin@opencatapult.net", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "ADMIN@OPENCATAPULT.NET", NormalizedUserName = "ADMIN@OPENCATAPULT.NET", PasswordHash = "AQAAAAEAACcQAAAAEKBBPo49hQnfSTCnZPTPvpdvqOA5YKXoS8XT6S4hbX9vVTzjKzgXGmUUKWnpOvyjhA==", PhoneNumberConfirmed = false, SecurityStamp = "D4ZMGAXVOVP33V5FMDWVCZ7ZMH5R2JCK", TwoFactorEnabled = false, UserName = "admin@opencatapult.net" }
                    );
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.ApplicationUserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new { UserId = 1, RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.ApplicationUserToken", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.CatapultEngineProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CatapultEngineId");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastSeen");

                    b.Property<DateTime?>("Updated");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.HasIndex("CatapultEngineId")
                        .IsUnique()
                        .HasFilter("[CatapultEngineId] IS NOT NULL");

                    b.ToTable("CatapultEngineProfile");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicationUserId");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTime>("Created");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.ToTable("UserProfile");

                    b.HasData(
                        new { Id = 1, ApplicationUserId = 1, ConcurrencyStamp = "99aa6fde-2675-4aa9-a60d-e45ba72fb9d0", Created = new DateTime(2018, 8, 23, 10, 4, 6, 797, DateTimeKind.Utc), IsActive = true }
                    );
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.ExternalService", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Core.Entities.ExternalServiceType", "ExternalServiceType")
                        .WithMany()
                        .HasForeignKey("ExternalServiceTypeId");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.ExternalServiceProperty", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Core.Entities.ExternalServiceType")
                        .WithMany("ExternalServiceProperties")
                        .HasForeignKey("ExternalServiceTypeId");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.JobDefinition", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Core.Entities.Project", "Project")
                        .WithMany("Jobs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.JobQueue", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Core.Entities.JobDefinition", "JobDefinition")
                        .WithMany()
                        .HasForeignKey("JobDefinitionId");

                    b.HasOne("Polyrific.Catapult.Api.Core.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.JobTaskDefinition", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Core.Entities.JobDefinition", "JobDefinition")
                        .WithMany("Tasks")
                        .HasForeignKey("JobDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.PluginAdditionalConfig", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Core.Entities.Plugin", "Plugin")
                        .WithMany()
                        .HasForeignKey("PluginId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.ProjectDataModel", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Core.Entities.Project", "Project")
                        .WithMany("Models")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.ProjectDataModelProperty", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Core.Entities.ProjectDataModel", "ProjectDataModel")
                        .WithMany("Properties")
                        .HasForeignKey("ProjectDataModelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Polyrific.Catapult.Api.Core.Entities.ProjectDataModel", "RelatedProjectDataModel")
                        .WithMany()
                        .HasForeignKey("RelatedProjectDataModelId");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Core.Entities.ProjectMember", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Core.Entities.Project", "Project")
                        .WithMany("Members")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Polyrific.Catapult.Api.Core.Entities.ProjectMemberRole", "ProjectMemberRole")
                        .WithMany()
                        .HasForeignKey("ProjectMemberRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Polyrific.Catapult.Api.Data.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Data.Identity.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Data.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Data.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Data.Identity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Polyrific.Catapult.Api.Data.Identity.ApplicationUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Data.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.CatapultEngineProfile", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Data.Identity.ApplicationUser", "CatapultEngine")
                        .WithOne("CatapultEngineProfile")
                        .HasForeignKey("Polyrific.Catapult.Api.Data.Identity.CatapultEngineProfile", "CatapultEngineId");
                });

            modelBuilder.Entity("Polyrific.Catapult.Api.Data.Identity.UserProfile", b =>
                {
                    b.HasOne("Polyrific.Catapult.Api.Data.Identity.ApplicationUser", "ApplicationUser")
                        .WithOne("UserProfile")
                        .HasForeignKey("Polyrific.Catapult.Api.Data.Identity.UserProfile", "ApplicationUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
